{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","helpers.js","App.js","index.js"],"names":["style","background","border","fontSize","fontWeight","cursor","outline","Square","value","onClick","borderRadius","width","height","margin","display","gridTemplate","Board","squares","map","square","i","key","styles","Game","useState","Array","fill","board","setBoard","xIsNext","setXisNext","winner","lines","length","a","b","c","calculateWinner","boardCopy","App","ReactDOM","render","document","getElementById"],"mappings":"oJAEA,IAAMA,EAAQ,CACVC,WAAY,YACZC,OAAQ,qBACRC,SAAU,OACVC,WAAY,MACZC,OAAQ,UACRC,QAAS,QASEC,EANA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,QAAV,OACX,4BAAQT,MAAOA,EAAOS,QAASA,GAC1BD,ICVHR,EAAQ,CACVE,OAAQ,qBACRQ,aAAc,OACdC,MAAO,QACPC,OAAQ,QACRC,OAAQ,SACRC,QAAS,OACTC,aAAc,mCAWHC,EARD,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASR,EAAZ,EAAYA,QAAZ,OACV,yBAAKT,MAAOA,GACPiB,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACT,kBAAC,EAAD,CAAQC,IAAKD,EAAGZ,MAAOW,EAAQV,QAAS,kBAAMA,EAAQW,WCZ5DE,EAAS,CACXX,MAAO,QACPE,OAAQ,aAuCGU,EApCF,WAAO,IAAD,EACWC,mBAASC,MAAM,GAAGC,KAAK,OADlC,mBACRC,EADQ,KACDC,EADC,OAEeJ,oBAAS,GAFxB,mBAERK,EAFQ,KAECC,EAFD,KAGTC,ECZH,SAAyBd,GAW9B,IAVA,IAAMe,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAZ,EAAI,EAAGA,EAAIY,EAAMC,OAAQb,IAAK,CAAC,IAAD,cACnBY,EAAMZ,GADa,GAC9Bc,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAInB,EAAQiB,IAAMjB,EAAQiB,KAAOjB,EAAQkB,IAAMlB,EAAQiB,KAAOjB,EAAQmB,GACpE,OAAOnB,EAAQiB,GAGnB,OAAO,KDLUG,CAAgBV,GAsB/B,OACI,oCACI,kBAAC,EAAD,CAAOV,QAASU,EAAOlB,QAtBX,SAAAW,GAChB,IAAMkB,EAAS,YAAOX,GAElBI,GAAUO,EAAUlB,KAExBkB,EAAUlB,GAAKS,EAAU,IAAM,IAC/BD,EAASU,GACTR,GAAYD,OAgBR,yBAAK7B,MAAOsB,GACR,2BAAIS,EAAS,WAAaA,EAAS,iBAAmBF,EAAU,IAAM,MAT9E,4BAAQpB,QAAS,kBAAMmB,EAASH,MAAM,GAAGC,KAAK,SAA9C,iBExBOa,EAFH,kBAAM,kBAAC,EAAD,OCClBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.d4b87573.chunk.js","sourcesContent":["import React from 'react';\n\nconst style = {\n    background: 'lightblue',\n    border: '2px solid darkblue',\n    fontSize: '30px',\n    fontWeight: '800',\n    cursor: 'pointer',\n    outline: 'none'\n};\n\nconst Square = ({ value, onClick }) => (\n    <button style={style} onClick={onClick}>\n        {value}\n    </button>\n);\n\nexport default Square;","import React from 'react';\nimport Square from './Square';\n\nconst style = {\n    border: '4px solid darkblue',\n    borderRadius: '10px',\n    width: '320px',\n    height: '320px',\n    margin: '0 auto',\n    display: 'grid',\n    gridTemplate: 'repeat(3, 1fr) / repeat(3, 1fr)'\n};\n\nconst Board = ({ squares, onClick }) => (\n    <div style={style}>\n        {squares.map((square, i) => (\n            <Square key={i} value={square} onClick={() => onClick(i)} />\n        ))}\n    </div>\n)\n\nexport default Board;","import React, { useState } from 'react';\nimport { calculateWinner } from '../helpers';\nimport Board from './Board';\n\nconst styles = {\n    width: '200px',\n    margin: '20px auto',\n};\n\nconst Game = () => {\n    const [board, setBoard] = useState(Array(9).fill(null));\n    const [xIsNext, setXisNext] = useState(true);\n    const winner = calculateWinner(board);\n\n    const handleClick = i => {\n        const boardCopy = [...board];\n        // If user click an occupied square or if game is won, return\n        if (winner || boardCopy[i]) return;\n        // Put an X or an O in the clicked square\n        boardCopy[i] = xIsNext ? 'X' : 'O';\n        setBoard(boardCopy);\n        setXisNext(!xIsNext);\n    }\n\n    const jumpTo = () => {\n\n    }\n\n    const renderMoves = () => (\n        <button onClick={() => setBoard(Array(9).fill(null))}>\n            Start Game\n        </button>\n    )\n\n    return (\n        <>\n            <Board squares={board} onClick={handleClick} />\n            <div style={styles}>\n                <p>{winner ? 'Winner: ' + winner : 'Next Player: ' + (xIsNext ? 'X' : 'O')}</p>\n                {renderMoves()}\n            </div>\n        </>\n    )\n}\n\nexport default Game;","export function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}","import React from 'react';\nimport Game from './components/Game';\n\nconst App = () => <Game />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}